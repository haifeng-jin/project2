PARSER_BEGIN(Parser)

	public class Parser {
		public static void main(String[] args) throws Exception {
			Exp result = new Parser(new java.io.StringReader(args[0])).statement();
			System.out.println(result);
		}
	}

// Classes defining the Abstract Syntax Tree
abstract class Exp {}
class DropTable extends Exp{
	String tableName;
	DropTable(String tableName) {
		this.tableName = tableName;
	}
	public String toString() {return "drop table: " + tableName + "";}
}

class AttributeItem extends Exp{
	String attributeName;
	String dataType;
	AttributeItem(String attributeName, String dataType) {
		this.attributeName = attributeName;
		this.dataType = dataType;
	}
	public String toString() {
		return attributeName + " " + dataType;
	}
}

class AttributeTypeList extends Exp{
	public AttributeItem item;
	AttributeTypeList list;
	AttributeTypeList(AttributeItem item, AttributeTypeList list) {
		this.item = item;
		this.list = list;
	}
	public String toString() {
		if (list == null)
			return item.toString();
		return list.toString() + ", " + item.toString();
	}
}

class CreateTable extends Exp{
	String tableName;
	AttributeTypeList attributeTypeList;
	CreateTable(String tableName, AttributeTypeList attributeTypeList) {
		this.tableName = tableName;
		this.attributeTypeList = attributeTypeList;
	}
	public String toString() {
		return "create table: " + tableName + " (" + attributeTypeList + ")";
	}
}
class Num extends Exp {
	int value;
	Num(int v) {value = v;}
	public String toString() {return value + "";}
}
class BinaryExp extends Exp {
	String op;
	Exp left, right;
	BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
	public String toString() {return "(" + op + " " + left + " " + right + ")";}
}

PARSER_END(Parser)

	SKIP:  { " " | "\t" | "\n" | "\r"                    }
TOKEN: { "(" | ")" | "+" | "*" |
	       <digit: ["0"-"9"]> |
		       <letter: ["a"-"z"]> |
		       <integer: (<digit>)+> |
			<data_type: "INT"|"STR20"> |
		       <name: <letter>(<digit>|<letter>)*> |
		       <column_name: (<name>".")<name> >
       }

Exp statement(): {Exp e;}
{
	e = dropTableStatement() {return e;} |
	e = createTableStatement() {return e;}
}

Exp dropTableStatement(): {Token t;}
{
	"DROP" "TABLE" t=<name> {return new DropTable(t.image);}
}

Exp createTableStatement(): {AttributeTypeList e; Token t;}
{
	"CREATE" "TABLE" t=<name> "(" e=attributeTypeList() ")" {return new CreateTable(t.image, e);}
}

AttributeTypeList attributeTypeList(): {AttributeTypeList list1; AttributeTypeList list2;}
{
	list1=attributeItem() ("," list2=attributeItem() {list1 = new AttributeTypeList(list2.item, list1);})* {
		return list1;
	}
}

AttributeTypeList attributeItem(): {Token t1; Token t2;} {
	t1=<name> t2=<data_type> { return new AttributeTypeList(new AttributeItem(t1.image, t2.image), null);}
}

Exp E(): {Exp e1; Exp e2;}
{
	e1=T() ("+" e2=T() {e1 = new BinaryExp("+", e1, e2);} )* {return e1;}
}

Exp T(): {Exp e1; Exp e2;}
{
	e1=F() ("*" e2=F() {e1 = new BinaryExp("*", e1, e2);} )* {return e1;}
}

Exp F(): {Exp e; Token n;}
{
	n=<integer> {return new Num(Integer.parseInt(n.image));}
	|
		"(" e=E() ")" {return e;}
}
