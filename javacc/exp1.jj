PARSER_BEGIN(Parser)

	public class Parser {
		public static void main(String[] args) throws Exception {
			Exp result = new Parser(new java.io.StringReader(args[0])).S();
			System.out.println(result);
		}
	}

// Classes defining the Abstract Syntax Tree
abstract class Exp {}
class TableName extends Exp {
	String value;
	TableName(String s) {value = s;}
	public String toString() {return value + "";}
}
class Num extends Exp {
	int value;
	Num(int v) {value = v;}
	public String toString() {return value + "";}
}
class BinaryExp extends Exp {
	String op;
	Exp left, right;
	BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
	public String toString() {return "(" + op + " " + left + " " + right + ")";}
}

PARSER_END(Parser)

	SKIP:  { " " | "\t" | "\n" | "\r"                    }
TOKEN: { "(" | ")" | "+" | "*"
	       | <digit: ["0"-"9"]>
		       | <letter: ["a"-"z"]>
		       | <integer: (<digit>)+>
		       | <table_name: <letter>(<digit>|<letter>)*> 
		       | <attribute_name: <letter>(<digit>|<letter>)*>
		       | <column_name: (<table_name>".")<attribute_name> >
       }

Exp S(): {Token e;}
{
	e=<table_name> {return new TableName(e.image);}
}

Exp E(): {Exp e1; Exp e2;}
{
	e1=T() ("+" e2=T() {e1 = new BinaryExp("+", e1, e2);} )* {return e1;}
}

Exp T(): {Exp e1; Exp e2;}
{
	e1=F() ("*" e2=F() {e1 = new BinaryExp("*", e1, e2);} )* {return e1;}
}

Exp F(): {Exp e; Token n;}
{
	n=<integer> {return new Num(Integer.parseInt(n.image));}
	|
		"(" e=E() ")" {return e;}
}
