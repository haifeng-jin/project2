options {
    STATIC = false;
}

PARSER_BEGIN(Parser)
package parser;

import expression.*;
public class Parser {
	public static void main(String[] args) throws Exception {
			Exp result = new Parser(new java.io.StringReader(args[0])).statement();
			System.out.println(result);
	}
}

PARSER_END(Parser)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN: { "(" | ")" | "+" | "*" |
		       <integer: (<digit>)+> |
	       <digit: ["0"-"9"]> |
	       <null_value: "NULL"> |
		       <letter: ["a"-"z"]> |
			<data_type: "INT"|"STR20"> |
		       <name: <letter>(<digit>|<letter>)*> |
		       <column_name: (<name>".")<name> > |
		       <literal: "\""(~["\""])+"\"" >
       }

Exp statement(): {Exp e;}
{
	e = dropTableStatement() {return e;} |
	e = createTableStatement() {return e;}
}

AttributeList attributeName(): {Token attributeName;}
{
    attributeName=<name> {
        return new AttributeList(attributeName.image);
    }
}

AttributeList attributeList(): {AttributeList list1; AttributeList list2; }
{
	list1=attributeName() ("," list2=attributeName() {list1 = new AttributeList(list1, list2);})* {
		return list1;
	}
}

ValueList getValue(): {Token t; }
{
    t = <literal>
    {
        String st = t.image;
        st = st.substring(1, st.length() - 1);
        return new ValueList(st);
    } | t=<integer>
    {
        return new ValueList(t.image);
    } | t=<null_value>
    {
        return new ValueList(t.image);
    }
}

ValueList valueList(): {ValueList list1; ValueList list2;}
{
	list1=getValue() ("," list2=getValue() {list1 = new ValueList(list1, list2);})* {
        return list1;
    }
}

InsertTuples insertTuples(): {ValueList list; }
{
    "VALUES" "(" list = valueList() ")"
    {
        return new InsertTuples(list);
    }
}

Insert insertStatement(): {Token tableName; AttributeList list; InsertTuples tuples; }
{
    "INSERT" "INTO" tableName = <name> "(" list = attributeList() ")" tuples = insertTuples()
    {
        return new Insert(tableName.image, list, tuples);
    }
}

DropTable dropTableStatement(): {Token t;}
{
	"DROP" "TABLE" t=<name> {return new DropTable(t.image);}
}

CreateTable createTableStatement(): {AttributeTypeList e; Token t;}
{
	"CREATE" "TABLE" t=<name> "(" e=attributeTypeList() ")" {return new CreateTable(t.image, e);}
}

AttributeTypeList attributeTypeList(): {AttributeTypeList list1; AttributeTypeList list2;}
{
	list1=attributeItem() ("," list2=attributeItem() {
	    list1 = new AttributeTypeList(list1, list2);
	})* {
		return list1;
	}
}

AttributeTypeList attributeItem(): {Token t1; Token t2;} {
	t1=<name> t2=<data_type> { return new AttributeTypeList(t1.image, t2.image);}
}

