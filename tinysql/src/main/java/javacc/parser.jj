options {
    STATIC = false;
}

PARSER_BEGIN(Parser)
package parser;

import expression.*;
public class Parser {
	public static void main(String[] args) throws Exception {
			Statement result = new Parser(new java.io.StringReader(args[0])).statement();
			System.out.println(result);
	}
}

PARSER_END(Parser)

SKIP:  { " " | "\t" | "\n" | "\r" }
TOKEN: { "(" | ")" | "+" | "*" |
		       <integer: (<digit>)+> |
	       <digit: ["0"-"9"]> |
	       <null_value: "NULL"> |
			<data_type: "INT"|"STR20"> |
		       <name: <letter>(<digit>|<letter>)*> |
		       <column_name: (<name>".")?<name> > |
		       <letter: ["a"-"z"]> |
		       <literal: "\""(~["\""])+"\"" > |
		       <comp: "<" | ">" | "=">
       }

Statement statement(): {Statement e;}
{
	e = dropTableStatement() {return e;} |
	e = createTableStatement() {return e;}
}

AttributeList attributeName(): {Token attributeName;}
{
    attributeName=<name> {
        return new AttributeList(attributeName.image);
    }
}

AttributeList attributeList(): {AttributeList list1; AttributeList list2; }
{
	list1=attributeName() ("," list2=attributeName() {list1 = new AttributeList(list1, list2);})* {
		return list1;
	}
}

ValueList getValue(): {Token t; }
{
    t = <literal>
    {
        String st = t.image;
        st = st.substring(1, st.length() - 1);
        return new ValueList(st);
    } | t=<integer>
    {
        return new ValueList(t.image);
    } | t=<null_value>
    {
        return new ValueList(t.image);
    }
}

ValueList valueList(): {ValueList list1; ValueList list2;}
{
	list1=getValue() ("," list2=getValue() {list1 = new ValueList(list1, list2);})* {
        return list1;
    }
}

InsertTuples insertTuples(): {ValueList list; }
{
    "VALUES" "(" list = valueList() ")"
    {
        return new InsertTuples(list);
    }
}

Insert insertStatement(): {Token tableName; AttributeList list; InsertTuples tuples; }
{
    "INSERT" "INTO" tableName = <name> "(" list = attributeList() ")" tuples = insertTuples()
    {
        return new Insert(tableName.image, list, tuples);
    }
}

DropTable dropTableStatement(): {Token t;}
{
	"DROP" "TABLE" t=<name> {return new DropTable(t.image);}
}

CreateTable createTableStatement(): {AttributeTypeList e; Token t;}
{
	"CREATE" "TABLE" t=<name> "(" e=attributeTypeList() ")" {return new CreateTable(t.image, e);}
}

AttributeTypeList attributeTypeList(): {AttributeTypeList list1; AttributeTypeList list2;}
{
	list1=attributeItem() ("," list2=attributeItem() {
	    list1 = new AttributeTypeList(list1, list2);
	})* {
		return list1;
	}
}

AttributeTypeList attributeItem(): {Token t1; Token t2;} {
	t1=<name> t2=<data_type> { return new AttributeTypeList(t1.image, t2.image);}
}

SearchCondition searchCondition(): {SearchCondition condition1; SearchCondition condition2; }
{
    condition1 = booleanTerm() ("OR" condition2 = booleanTerm() {
        condition1 = new SearchCondition(condition1, condition2);
    })* {
        return condition1;
    }
}

SearchCondition booleanTerm(): {BooleanTerm term1; BooleanTerm term2;} {
    term1 = booleanFactor() ("AND" term2 = booleanFactor() {
        term1 = new BooleanTerm(term1, term2);
    })* {
        return new SearchCondition(term1);
    }
}

BooleanTerm booleanFactor(): {Expression exp1; Expression exp2; Token t;} {
    exp1 = expression() t=<comp> exp2 = expression() {
        return new BooleanTerm(new BooleanFactor(exp1, t.image, exp2));
    }
}

Expression expression(): {String term1; String term2;} {
    term1 = term() {
        return new Expression(term1);
    } | LOOKAHEAD(3) "(" term1 = term() "+" term2=term() ")" {
        return new Expression(term1, "+", term2);
    } | LOOKAHEAD(3) "(" term1 = term() "-" term2=term() ")" {
        return new Expression(term1, "-", term2);
    } | "(" term1 = term() "*" term2=term() ")" {
        return new Expression(term1, "*", term2);
    }
}

String term(): {Token t;} {
    t = <column_name> {
        return t.image;
    } | t = <literal> {
        return t.image;
    } | t = <name> {
        return t.image;
    } | t = <integer> {
        return t.image;
    }
}

Select select(): {SelectList columnList; TableList tableList; boolean distinct; SearchCondition condition; Token t; } {
    "SELECT" {distinct = false; condition = null; t=new Token();} ("DISTINCT" { distinct = true; })? columnList = selectList() "FROM" tableList = tableList()
    ("WHERE" condition = searchCondition())? ("ORDER" "BY" t=<name> | t=<column_name> )? {
        return new Select(columnList, tableList, distinct, t.image, condition);
    }
}

SelectList selectList(): {SelectList list1; SelectList list2; } {
    "*" {
        return new SelectList("*");
    } | list1=singleSelectList() ("," list2=singleSelectList() { list1 = new SelectList(list1, list2); } )* {
        return list1;
    }
}

SelectList singleSelectList(): { Token t; } {
    t = <column_name> {
        return new SelectList(t.image);
    }| t= <name> {
        return new SelectList(t.image);
    }
}

TableList tableList(): {TableList list1; TableList list2; } {
    list1 = singleTableList() ("," list2 = singleTableList() { list1 = new TableList(list1, list2); })* {
        return list1;
    }
}

TableList singleTableList(): { Token t; } {
    t = <name> {
        return new TableList(t.image);
    }
}
