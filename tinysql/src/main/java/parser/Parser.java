/* Generated By:JavaCC: Do not edit this line. Parser.java */
package parser;

import expression.*;
public class Parser implements ParserConstants {
        public static void main(String[] args) throws Exception {
                        Statement result = new Parser(new java.io.StringReader(args[0])).statement();
                        System.out.println(result);
        }

  final public Statement statement() throws ParseException {
                        Statement e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 34:
      e = delete();
                      {if (true) return e;}
      break;
    case 20:
      e = insertStatement();
                               {if (true) return e;}
      break;
    case 28:
      e = select();
                      {if (true) return e;}
      break;
    case 22:
      e = dropTableStatement();
                                  {if (true) return e;}
      break;
    case 24:
      e = createTableStatement();
                                    {if (true) return e;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public AttributeList attributeName() throws ParseException {
                                Token attributeName;
    attributeName = jj_consume_token(name);
        {if (true) return new AttributeList(attributeName.image);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeList attributeList() throws ParseException {
                                AttributeList list1; AttributeList list2;
    list1 = attributeName();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(18);
      list2 = attributeName();
                                                          list1 = new AttributeList(list1, list2);
    }
                {if (true) return list1;}
    throw new Error("Missing return statement in function");
  }

  final public ValueList getValue() throws ParseException {
                       Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case literal:
      t = jj_consume_token(literal);
        String st = t.image;
        st = st.substring(1, st.length() - 1);
        {if (true) return new ValueList(st);}
      break;
    case integer:
      t = jj_consume_token(integer);
        {if (true) return new ValueList(t.image);}
      break;
    case null_value:
      t = jj_consume_token(null_value);
        {if (true) return new ValueList(t.image);}
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public ValueList valueList() throws ParseException {
                        ValueList list1; ValueList list2;
    list1 = getValue();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(18);
      list2 = getValue();
                                                list1 = new ValueList(list1, list2);
    }
        {if (true) return list1;}
    throw new Error("Missing return statement in function");
  }

  final public InsertTuples insertTuples() throws ParseException {
                              ValueList list;
    jj_consume_token(19);
    jj_consume_token(5);
    list = valueList();
    jj_consume_token(6);
        {if (true) return new InsertTuples(list);}
    throw new Error("Missing return statement in function");
  }

  final public Insert insertStatement() throws ParseException {
                           Token tableName; AttributeList list; InsertTuples tuples;
    jj_consume_token(20);
    jj_consume_token(21);
    tableName = jj_consume_token(name);
    jj_consume_token(5);
    list = attributeList();
    jj_consume_token(6);
    tuples = insertTuples();
        {if (true) return new Insert(tableName.image, list, tuples);}
    throw new Error("Missing return statement in function");
  }

  final public DropTable dropTableStatement() throws ParseException {
                                 Token t;
    jj_consume_token(22);
    jj_consume_token(23);
    t = jj_consume_token(name);
                                 {if (true) return new DropTable(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public CreateTable createTableStatement() throws ParseException {
                                     AttributeTypeList e; Token t;
    jj_consume_token(24);
    jj_consume_token(23);
    t = jj_consume_token(name);
    jj_consume_token(5);
    e = attributeTypeList();
    jj_consume_token(6);
                                                                 {if (true) return new CreateTable(t.image, e);}
    throw new Error("Missing return statement in function");
  }

  final public AttributeTypeList attributeTypeList() throws ParseException {
                                        AttributeTypeList list1; AttributeTypeList list2;
    list1 = attributeItem();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      jj_consume_token(18);
      list2 = attributeItem();
            list1 = new AttributeTypeList(list1, list2);
    }
                {if (true) return list1;}
    throw new Error("Missing return statement in function");
  }

  final public AttributeTypeList attributeItem() throws ParseException {
                                    Token t1; Token t2;
    t1 = jj_consume_token(name);
    t2 = jj_consume_token(data_type);
                                   {if (true) return new AttributeTypeList(t1.image, t2.image);}
    throw new Error("Missing return statement in function");
  }

  final public SearchCondition searchCondition() throws ParseException {
                                    SearchCondition condition1; SearchCondition condition2;
    condition1 = booleanTerm();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 25:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_4;
      }
      jj_consume_token(25);
      condition2 = booleanTerm();
        condition1 = new SearchCondition(condition1, condition2);
    }
        {if (true) return condition1;}
    throw new Error("Missing return statement in function");
  }

  final public SearchCondition booleanTerm() throws ParseException {
                                BooleanTerm term1; BooleanTerm term2;
    term1 = booleanFactor();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 26:
        ;
        break;
      default:
        jj_la1[6] = jj_gen;
        break label_5;
      }
      jj_consume_token(26);
      term2 = booleanFactor();
        term1 = new BooleanTerm(term1, term2);
    }
        {if (true) return new SearchCondition(term1);}
    throw new Error("Missing return statement in function");
  }

  final public BooleanTerm booleanFactor() throws ParseException {
                              Expression exp1; Expression exp2; Token t;
    exp1 = expression();
    t = jj_consume_token(comp);
    exp2 = expression();
        {if (true) return new BooleanTerm(new BooleanFactor(exp1, t.image, exp2));}
    throw new Error("Missing return statement in function");
  }

  final public Expression expression() throws ParseException {
                          Term term1; Term term2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case integer:
    case name:
    case column_name:
    case literal:
      term1 = term();
        {if (true) return new Expression(term1.term, term1.type);}
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_1(3)) {
        jj_consume_token(5);
        term1 = term();
        jj_consume_token(7);
        term2 = term();
        jj_consume_token(6);
        {if (true) return new Expression(term1.term, "+", term2.term);}
      } else if (jj_2_2(3)) {
        jj_consume_token(5);
        term1 = term();
        jj_consume_token(27);
        term2 = term();
        jj_consume_token(6);
        {if (true) return new Expression(term1.term, "-", term2.term);}
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 5:
          jj_consume_token(5);
          term1 = term();
          jj_consume_token(8);
          term2 = term();
          jj_consume_token(6);
        {if (true) return new Expression(term1.term, "*", term2.term);}
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
    throw new Error("Missing return statement in function");
  }

  final public Term term() throws ParseException {
              Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case column_name:
      t = jj_consume_token(column_name);
        {if (true) return new Term(t.image, "column_name");}
      break;
    case literal:
      t = jj_consume_token(literal);
        String st = t.image;
        st = st.substring(1, st.length() - 1);
        {if (true) return new Term(st, "literal");}
      break;
    case name:
      t = jj_consume_token(name);
        {if (true) return new Term(t.image, "name");}
      break;
    case integer:
      t = jj_consume_token(integer);
        {if (true) return new Term(t.image, "integer");}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public Select select() throws ParseException {
                  SelectList columnList; TableList tableList; boolean distinct; SearchCondition condition; Token t;
    jj_consume_token(28);
              distinct = false; condition = new SearchCondition(); t=new Token();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 29:
      jj_consume_token(29);
                                                                                                 distinct = true;
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    columnList = selectList();
    jj_consume_token(30);
    tableList = tableList();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      condition = searchCondition();
      break;
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 32:
      jj_consume_token(32);
      jj_consume_token(33);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case name:
        t = jj_consume_token(name);
        break;
      case column_name:
        t = jj_consume_token(column_name);
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
        {if (true) return new Select(columnList, tableList, distinct, t.image, condition);}
    throw new Error("Missing return statement in function");
  }

  final public SelectList selectList() throws ParseException {
                          SelectList list1; SelectList list2;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 8:
      jj_consume_token(8);
        {if (true) return new SelectList("*");}
      break;
    case name:
    case column_name:
      list1 = singleSelectList();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 18:
          ;
          break;
        default:
          jj_la1[14] = jj_gen;
          break label_6;
        }
        jj_consume_token(18);
        list2 = singleSelectList();
                                                                 list1 = new SelectList(list1, list2);
      }
        {if (true) return list1;}
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public SelectList singleSelectList() throws ParseException {
                                 Token t;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case column_name:
      t = jj_consume_token(column_name);
        {if (true) return new SelectList(t.image);}
      break;
    case name:
      t = jj_consume_token(name);
        {if (true) return new SelectList(t.image);}
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public TableList tableList() throws ParseException {
                        TableList list1; TableList list2;
    list1 = singleTableList();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[17] = jj_gen;
        break label_7;
      }
      jj_consume_token(18);
      list2 = singleTableList();
                                                               list1 = new TableList(list1, list2);
    }
        {if (true) return list1;}
    throw new Error("Missing return statement in function");
  }

  final public TableList singleTableList() throws ParseException {
                               Token t;
    t = jj_consume_token(name);
        {if (true) return new TableList(t.image);}
    throw new Error("Missing return statement in function");
  }

  final public Delete delete() throws ParseException {
                   Token t; SearchCondition condition;
    jj_consume_token(34);
               condition = new SearchCondition();
    jj_consume_token(30);
    t = jj_consume_token(name);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 31:
      jj_consume_token(31);
      condition = searchCondition();
      break;
    default:
      jj_la1[18] = jj_gen;
      ;
    }
        {if (true) return new Delete(t.image, condition);}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_3_2() {
    if (jj_scan_token(5)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(27)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_scan_token(literal)) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_scan_token(5)) return true;
    if (jj_3R_8()) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_scan_token(integer)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    if (jj_scan_token(column_name)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(name)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public ParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x11500000,0x40000,0x10a00,0x40000,0x40000,0x2000000,0x4000000,0x16200,0x20,0x16200,0x20000000,0x80000000,0x6000,0x0,0x40000,0x6100,0x6000,0x40000,0x80000000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[2];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 19; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        exists = true;
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[35];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 19; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 35; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 2; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
