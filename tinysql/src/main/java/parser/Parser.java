/* Generated By:JavaCC: Do not edit this line. Parser.java */
        public class Parser implements ParserConstants {
                public static void main(String[] args) throws Exception {
                        Exp result = new Parser(new java.io.StringReader(args[0])).statement();
                        System.out.println(result);
                }

  static final public Exp statement() throws ParseException {
                  Exp e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 15:
      e = dropTableStatement();
                                  {if (true) return e;}
      break;
    case 17:
      e = createTableStatement();
                                    {if (true) return e;}
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public Exp dropTableStatement() throws ParseException {
                           Token t;
    jj_consume_token(15);
    jj_consume_token(16);
    t = jj_consume_token(name);
                                 {if (true) return new DropTable(t.image);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp createTableStatement() throws ParseException {
                             AttributeTypeList e; Token t;
    jj_consume_token(17);
    jj_consume_token(16);
    t = jj_consume_token(name);
    jj_consume_token(5);
    e = attributeTypeList();
    jj_consume_token(6);
                                                                 {if (true) return new CreateTable(t.image, e);}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeTypeList attributeTypeList() throws ParseException {
                                        AttributeTypeList list1; AttributeTypeList list2;
    list1 = attributeItem();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 18:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      jj_consume_token(18);
      list2 = attributeItem();
                                                          list1 = new AttributeTypeList(list2.item, list1);
    }
                {if (true) return list1;}
    throw new Error("Missing return statement in function");
  }

  static final public AttributeTypeList attributeItem() throws ParseException {
                                    Token t1; Token t2;
    t1 = jj_consume_token(name);
    t2 = jj_consume_token(data_type);
                                   {if (true) return new AttributeTypeList(new AttributeItem(t1.image, t2.image), null);}
    throw new Error("Missing return statement in function");
  }

  static final public Exp E() throws ParseException {
          Exp e1; Exp e2;
    e1 = T();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 7:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(7);
      e2 = T();
                            e1 = new BinaryExp("+", e1, e2);
    }
                                                                  {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp T() throws ParseException {
          Exp e1; Exp e2;
    e1 = F();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 8:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(8);
      e2 = F();
                            e1 = new BinaryExp("*", e1, e2);
    }
                                                                  {if (true) return e1;}
    throw new Error("Missing return statement in function");
  }

  static final public Exp F() throws ParseException {
          Exp e; Token n;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case integer:
      n = jj_consume_token(integer);
                     {if (true) return new Num(Integer.parseInt(n.image));}
      break;
    case 5:
      jj_consume_token(5);
      e = E();
      jj_consume_token(6);
                               {if (true) return e;}
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x28000,0x40000,0x80,0x100,0x820,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

        }

// Classes defining the Abstract Syntax Tree
abstract class Exp {}
class DropTable extends Exp{
        String tableName;
        DropTable(String tableName) {
                this.tableName = tableName;
        }
        public String toString() {return "drop table: " + tableName + "";}
}

class AttributeItem extends Exp{
        String attributeName;
        String dataType;
        AttributeItem(String attributeName, String dataType) {
                this.attributeName = attributeName;
                this.dataType = dataType;
        }
        public String toString() {
                return attributeName + " " + dataType;
        }
}

class AttributeTypeList extends Exp{
        public AttributeItem item;
        AttributeTypeList list;
        AttributeTypeList(AttributeItem item, AttributeTypeList list) {
                this.item = item;
                this.list = list;
        }
        public String toString() {
                if (list == null)
                        return item.toString();
                return list.toString() + ", " + item.toString();
        }
}

class CreateTable extends Exp{
        String tableName;
        AttributeTypeList attributeTypeList;
        CreateTable(String tableName, AttributeTypeList attributeTypeList) {
                this.tableName = tableName;
                this.attributeTypeList = attributeTypeList;
        }
        public String toString() {
                return "create table: " + tableName + " (" + attributeTypeList + ")";
        }
}
class Num extends Exp {
        int value;
        Num(int v) {value = v;}
        public String toString() {return value + "";}
}
class BinaryExp extends Exp {
        String op;
        Exp left, right;
        BinaryExp(String o, Exp l, Exp r) {op = o; left = l; right = r;}
        public String toString() {return "(" + op + " " + left + " " + right + ")";}
}
